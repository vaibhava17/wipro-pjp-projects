I)
CREATE FUNCTION GET_JOB
RETURN JOB FOR EMPLOYEE IS
BEGIN
SELECT GET_JOB FROM EMP;
WHERE LEN(JOB<=35)
DBMS_OUTPUT.PUT('JOB FOR EMPLOYEE :' JOB);
END;
/
II)
CREATE FUNCTION GET_ANNUAL_SAL(TOTAL SAL)
RETURN SAL IS
TOTAL SAL(2) :=0;
BEGIN
SELECT COUNT(*) INTO TOTAL SAL
FROM EMP
WHERE
DEPTNO='30';
RETURN TOATAL SAL;
END;
/

III)
CREATE FUNCTION VALID_DEPTNO(DEPT)
RETURN DEPT IS
BEGIN 
SELECT VALID_DEPTNO(*) FROM DEPT;
WHERE
INSERT INTO DEPT
WHERE 
DBMS_OUTPUT.PUT('ENTER DEPTNO':)
{BOOLEAN EXPRESSION -> DEPTNO =''}
RETURN
DBMS_OUTPUT.PUT('TRUE :');
ELSE
DBMS_OUTPUT.PUT('UNEXPECTED ERROR OCCUR')
END;
BEGIN
CREATE PROCEDURE ADD_EMP(EMPNO, EMPNAME, SAL, DEPTNO) FROM EMP;
IF 
{(BOOLEAN EXPRESSION -> DEPTNO=''):: TRUE}
RETURN
INSERT INTO EMP
VAL%ROWTYPE 
ELSE
DBMS_OUTPUT.PUT('ALERT UNEXPECTED ERROR:')
END IF;
END;
/

IV)

CREATE CAL_REVERSE(EMP)
BEGIN
REVERSE('INPUT STRING');
RETURN
DBMS_OUTPUT.PUT('REVERSE OF STRING IS : ');
END;
/
 V)
CREATE CAL_PCT(SAL) FROM EMP;
RETURN SAL IS 
BEGIN

SAL%ROWTYPE FROM EMP;
SELECT SUM(*SAL) INTO TOTAL
FROM EMP
WHERE TOTAL SAL>2000;
PCT_SAL=(SAL/TOTAL SAL)*100;
SET PCT_SAL ='16%' DEFAULT;
DBMS_OUTPUT.PUT('PCT_SAL :')
END;

VI)
CREATE REC_INSUPD(EMPNO, ENAME, SAL )FROM EMP
BEGIN
SELECT AVG (* SAL) FROM EMP
IF AVG SAL > SAL
RETURN TRUE;
ELSE
RETURN FALSE;
SELECT * SAL FROM EMP;
IF (AVG_SAL<SAL :: TRUE)
THEN
INSERT 
EMPNO%ROWTYPE
ENAME%ROWTYPE
SAL%ROWTYPE
ELSE
(AVG_SAL>SAL:: FALSE)
DBMS_OUTPUT.PUT(ROW ARE INSERTED SUCCESSFULLY :);
END IF;
UPDATE 
INSERT 
EMPNO%ROWTYPE
ENAME%ROWTYPE
SAL%ROWTYPE
ELSE
(AVG_SAL>SAL:: FALSE)
DBMS_OUTPUT.PUT(ROW ARE UPDATED SUCCESSFULLY :);
END;
/

VII)
CREATE  CAL_LDATE(EMP)
RETURN DATE IS
BEGIN
CAL_LDATE(*) FROM EMP ;
WHERE
SELECT EXTRACT(DAY FORM JOIN DATE ) AS YEAROFJOINING FORM EMP;
DBMS_OUTPUT.PUT('DATE OF JOINING IS :');
END;
/

VIII)
CREATE CAL_WORDS(EMP)
RETURN WORDS;
BEGIN
SELECT TO_CHAR(TO_DATE(:NUMBER,'J'),'JSP')FROM DUAL;
DBMS_OUTPUT.PUT('OUTPUT IS HERE :');
END;
/

IX)NOT ATTEMPTED