I)
DECLARE 
    
PROCEDURE ADD_DEPT(DEPT IS OUT DEPTNO, DENAME, LOC) IS 
BEGIN 
INSERT
DBMS_OUTPUT.PUT('DEP.DEPTNO' || DEPTNO);
DBMS_OUTPUT.PUT('DEP.DNAME' || DNAME);
DBMS_OUTPUT.PUT('DEP.SAL' || SAL);
 
END;  
BEGIN 
   ADD DEPT();
IF DEPT%ROWTYPE
THEN
DBMS_OUTPUT.PUT('ROW IS ALREADY PRESENT' || DEPT_TABLE);
ELSE
DBMS_OUTPUT.PUT(ADD DEPT()); 
END; 
/

II)
DECLARE 
    
PROCEDURE UPDATE_DEPT(DEPT IS OUT DEPTNO, DENAME, LOC) IS 
BEGIN 
IF DEPTNO = DEPT.DEPTNO
THEN
UPDATE(DEPT.DNAME, DEPT.LOC)
DBMS_OUTPUT.PUT('DEP.DNAME' || DNAME);
DBMS_OUTPUT.PUT('DEP.LOC' || LOC);
 
ELSE
DBMS_OUTPUT.PUT('UNEXPECTED ERROR OCCUR'|| DEPT_TABLE);
END; 
/

III)
DECLARE 
    
PROCEDURE DELETE_DEPT(DEPT IS OUT DEPTNO) IS 
BEGIN 
IF DEPTNO = DEPT.DEPTNO
THEN
DELETE
(DEPT.DNAME, DEPT.LOC)
DBMS_OUTPUT.PUT('DEP.DNAME' || DNAME);
DBMS_OUTPUT.PUT('DEP.LOC' || LOC);
 
ELSE
DBMS_OUTPUT.PUT('UNEXPECTED ERROR OCCUR'|| DEPT_TABLE);
END; 
/

IV)
CREATE PROCEDURE WIPRO (Emp_number  IN  Emp_tab.Empno%TYPE,
                              Emp_ret     OUT Emp_tab%ROWTYPE) AS
PROCEDURE ADD_DEPT(USER IS OUT ACCEPT CURRENT_USER)
BEGIN
   SELECT Empno, Ename, Job, Mgr, Hiredate, Sal, Comm, Deptno
      INTO Emp_ret
      FROM Emp_tab
      WHERE Empno = Emp_number;
INSERT DEPT_TABLE
IN 
WIPRO USER
WHERE
DEPTNO= DEPT.DEPTNO;
DNAME= DEPT.DNAME;
LOC=DEPT.LOC
EXCUTE 
WIPRO_USER IN SCOTT;
CHECK
IF 
(DEPT_TABLE)IN WIPRO_USER;
ELSE
DBMS.OUTPUT.PUT('UNEXPECTED ERROR OCCUR');
END;
/

V)
ALTER TABLE DEPT;
DROP COLUMN X;
DBMS_OUTPUT.PUT('INVALID PROCEDURE');
PROCEDURE ADD_DEPT(USER IS OUT ACCEPT CURRENT_USER)
BEGIN
   SELECT DEPTNO,DNAME, JOB,SAL
      INTO DEPT_ret
      FROM DEPT_tab
      WHERE DEPT =DEPT_number;

PROCEDURE UPDATE_DEPT(USER IS OUT ACCEPT CURRENT_USER)
BEGIN
   SELECT DEPTNO,DNAME, JOB,SAL
      INTO DEPT_ret
      FROM DEPT_tab
      WHERE DEPT =DEPT_number;
PROCEDURE DELETE_DEPT(USER IS OUT ACCEPT CURRENT_USER)
BEGIN
   SELECT DEPTNO,DNAME, JOB,SAL
      INTO DEPT_ret
      FROM DEPT_tab
      WHERE DEPT =DEPT_number;
DROP COLUMN X;
DBMS_OUTPUT.PUT('PROCEDURE IS VALID')
END;
/

VI)
 PROCEDURE test_add_dept
 v_status VARCHAR2(40);

BEGIN
PROCEDURE ADD_dept(DEPT IS DEPTNO, DNAME, LOC OUT) IS;

    TEXT_IO.PUT_LINE(v_status);

 EXCEPTION

    WHEN others THEN

        p_status := "CHECK THIS WE HAVE UNKNOWN PROBLEM.";

END;
/

VII)
CREATE PROCEDURE EMP_TEST(EMPNO, ENAME, DEPTID, SAL)
 DECLARE
CURSOR CUR IS SELECT * FROM EMP;
EVAL EMP%ROWTYPE;
EVAL2 EMP%ROWTYPE;
BEGIN
OPEN CUR
FETCH CUR INTO EVAL, EVAL2;
DBMS_OUTPUT.PUT(EVAL.ENAME);
DBMS_OUTPUT.PUT(EVAL2.DEPTNO)
UPDATE
SAL = SAL+(20/100*10);
FROM DEPTNO
DBMS_OUTPUT.PUT(''|| SAL UPDATED || FOR EMPLOYEE);
END;
/

VIII)
CREATE PROCEDURE EMP_TEST(EMPNO, ENAME, DEPTID, SAL)
 DECLARE
CURSOR CUR IS SELECT * FROM EMP;
EVAL EMP%ROWTYPE;
EVAL2 EMP%ROWTYPE;
BEGIN
OPEN CUR
FETCH CUR INTO EVAL, EVAL2;
DBMS_OUTPUT.PUT(EVAL.ENAME);
DBMS_OUTPUT.PUT(EVAL2.DEPTNO)
DELETE
ENAME=EMP.ENAME
WHERE DEPTNO('....')
DBMS_OUTPUT.PUT('RECORD IS DELETED')
END;

BEGIN
INSERT
EMP%ROWTYPE;
DEPT%ROWTYPE
 IN (TEST_TABLE);
DBMS_OUTPUT.PUT('EMPLOYEE INSERTED SUCCESSFULLY);
END;
/

IX)
CREATE GET_EMP(EMPNO IN ENAME OUT SAL OUT )
 DECLARE
CURSOR CUR IS SELECT * FROM GET_EMP;
VAR GET_EMP%ROWTYPE;
OUTPUT GET_EMP%ROWTYPE;
BEGIN
OPEN CUR
FETCH CUR INTO VAR, OUTPUT;
DBMS_OUTPUT.PUT(VAR.ENAME);
DBMS_OUTPUT.PUT(OUTPUT.DEPTNO)
DELETE
ENAME=GET_EMP.ENAME
WHERE EMPNO('7788')
DBMS_OUTPUT.PUT('ENAME FOR THIS EMPNO IS :')
END;

X)
CREATE EMP(MOBILE_NO IN)OUT
DECLARE
CURSOR CUR IS SELECT * FROM EMP
WHERE MOBILE_NO %ROWTYPE;
BEGIN 
OPEN CUR
FETCH CUR MOBILE_NO;
MOBILE_NO='9999999999'
WHERE
SELECT
MOBILE_NO,
CONCAT(')'
SUBSTR(MOBILE_NUM, 1,3),
')'
SUBSTR(MOBILE_NUM,4,3),
'-',
SUBSTR(MOBILE_NUM,7)
)AS NUM_FORMATTED
FROM
EMP
DBMS_OUTPUT.PUT('MOBILE_NO :'MOBILE_NO);
END;
/